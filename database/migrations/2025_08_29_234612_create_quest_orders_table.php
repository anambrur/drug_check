<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('quest_orders', function (Blueprint $table) {
            $table->id();

            // Foreign key to link to your users table (if applicable)
            $table->foreignId('user_id')->nullable()->constrained()->onDelete('set null');
            // Foreign key to link to your payments or transactions table
            $table->string('payment_intent_id')->nullable(); // Stripe Payment Intent ID

            // Quest Identifiers (THE MOST IMPORTANT FIELDS)
            $table->string('quest_order_id')->nullable()->unique(); // From Quest API Response
            $table->string('reference_test_id')->nullable()->unique(); // From Quest API Response
            $table->string('client_reference_id'); // Generated by us in buildOrderXml

            // Order Status and Result from Quest Webhooks
            $table->string('order_status')->nullable()->index(); // e.g., 'ORDERED', 'COLLECTED', 'ATLAB'
            $table->string('order_result')->nullable()->index(); // e.g., 'Negative', 'Positive'
            $table->timestamp('order_status_updated_at')->nullable();
            $table->timestamp('order_result_updated_at')->nullable();

            // Donor Information (From Form)
            $table->string('first_name');
            $table->string('last_name');
            $table->string('middle_name')->nullable();
            $table->string('primary_id'); // e.g., Driver's License Number
            $table->string('primary_id_type')->nullable(); // e.g., 'DL'
            $table->date('dob')->nullable();
            $table->string('primary_phone');
            $table->string('secondary_phone')->nullable();
            $table->string('email')->nullable();
            $table->string('zip_code')->nullable();

            // Test Information (From Form and Portfolio)
            $table->text('portfolio_name')->nullable(); // Store the name at the time of order
            $table->text('unit_codes')->nullable(); // JSON encoded array of unit codes
            $table->string('dot_test', 1); // 'T' or 'F'
            $table->string('testing_authority')->nullable(); // e.g., 'FMCSA'
            $table->string('reason_for_test_id')->nullable(); // For Drug/eBAT
            $table->string('physical_reason_for_test_id')->nullable(); // For Physicals
            $table->string('collection_site_id')->nullable();
            $table->string('observed_requested', 1)->default('N'); // 'Y' or 'N'
            $table->string('split_specimen_requested', 1)->default('N'); // 'Y' or 'N'
            $table->text('order_comments')->nullable();

            // Client Info (From your .env/config)
            $table->string('lab_account');
            $table->string('csl')->nullable();
            $table->string('contact_name')->nullable();
            $table->string('telephone_number')->nullable();

            // Timing Information
            $table->timestamp('end_datetime')->nullable();
            $table->integer('end_datetime_timezone_id')->nullable();
            $table->timestamp('expired_at')->nullable(); // To mark orders that passed their EndDateTime

            // API Interaction Logging
            $table->text('request_xml')->nullable(); // The XML sent to Quest
            $table->text('create_response_xml')->nullable(); // The full XML response from CreateOrder
            $table->string('create_response_status'); // 'SUCCESS' or 'FAILURE'
            $table->text('create_error')->nullable(); // JSON encoded error details if failed

            $table->timestamps();
            $table->softDeletes(); // Optional, but good practice

            // Indexes for better query performance
            $table->index(['user_id', 'created_at']);
            $table->index('client_reference_id');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('quest_orders');
    }
};